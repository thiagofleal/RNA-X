Incluir: @"Lista.cx";

Classe: ErroRede
{
	Herdar: Erro;
	
	construtor(Texto: msg)
	{
		base(msg);
	}
	
	mensagem()
	{
		retornar: "Erro na Rede Neural\n" << base.mensagem();
	}
}

Classe: Sinapse
{
	Privado:
		
		Objeto: neuronio;
		Real: peso;
		
	Publico:
		
		construtor(Objeto: neuronio, Real: peso)
		{
			este.neuronio = neuronio;
			
			se(peso >= -1 && peso <= 1)
			{
				este.peso = peso;
			}
		}
		
		neuronio()
		{retornar: este.neuronio;}
		
		peso()
		{retornar: este.peso;}
		
		aprender(Real: variacao)
		{
			este.peso += variacao;
		}
		
		resultado()
		{
			retornar: este.neuronio.saida() * este.peso;
		}
		
		persistir(Arquivo: arquivo)
		{
			arquivo.escreverLinha("\t\t\tSinapse " << este.peso);
		}
		
		recuperar(Arquivo: arquivo)
		{
			este.peso = arquivo.real();
		}
}

Classe: Neuronio
{
	Privado:
		
		Real: entrada;
		Real: saida;
		Real: erro;
		Objeto: sinapses;
		Objeto: interface;
		
	Publico:
		
		construtor(Objeto: interface)
		{
			este.interface = interface;
			este.sinapses = novo Lista();
		}
		
		destrutor()
		{
			para(Inteiro: i; i < este.sinapses.tamanho(); i++)
			{
				este.sinapses.valor(i).destruir();
			}
			este.sinapses.destruir();
		}
		
		entrada()
		{retornar: este.entrada;}
		
		saida()
		{retornar: este.saida;}
		
		sinapse(Inteiro: indice)
		{retornar: este.sinapses.valor(indice);}
		
		quantidade_sinapses()
		{retornar: este.sinapses.tamanho();}
		
		interface()
		{retornar: este.interface;}
		
		erro({Real}Real[]: erro)
		{
			se(erro.tamanho != 0)
			{
				este.erro = erro[0];
				erro.liberar();
			}
			retornar: este.erro;
		}
		
		conectar(Objeto: neuronio, Real: peso)
		{
			este.sinapses.adicionar(novo Sinapse(neuronio, peso));
		}
		
		desconectar(Inteiro: indice)
		{
			Objeto: sinapse = este.sinapses.valor(indice);
			este.sinapses.remover(indice);
			sinapse.destruir();
		}
		
		processar()
		{
			este.entrada = 0;
			
			para(Inteiro: i; i < este.sinapses.tamanho(); i++)
			{
				este.entrada += este.sinapses.valor(i).resultado();
			}
			
			este.saida = este.interface.ativar(este.entrada);
		}
		
		persistir(Arquivo: arquivo)
		{
			arquivo.escreverLinha("\t\tNeurônio");
			
			para(Inteiro: i; i < este.sinapses.tamanho(); i++)
			{
				este.sinapses.valor(i).persistir(arquivo);
			}
			
			arquivo.escreverLinha("\t\t/Neurônio");
		}
		
		recuperar(Arquivo: arquivo)
		{
			Inteiro: i;
			Texto: linha;
			
			enquanto((linha = arquivo.palavra()) == "Sinapse")
			{
				este.sinapses.valor(i).recuperar(arquivo);
				i++;
			}
			
			se(linha != "/Neurônio")
			{
				disparar: novo ErroRede("Espera-se \"/Neurônio\" no lugar de \"" << linha << "\"");
			}
		}
}

Classe: Entrada
{
	Privado:
		
		Real: valor;
		
	Publico:
		
		definir(Real: valor)
		{este.valor = valor;}
		
		saida()
		{retornar: este.valor;}
}

Classe: Saida
{
	Herdar: Neuronio;
	
	construtor(Objeto: interface)
	{
		base(interface);
	}
	
	exemploUnicaCamada(Real: esperado)
	{
		este.erro(esperado - este.saida());
	}
	
	exemploMultiplasCamadas(Real: esperado)
	{
		este.erro(este.interface().derivada(este.entrada()) * (esperado - este.saida()));
	}
}

Classe: Camada
{
	Herdar: Lista;
	
	destrutor()
	{
		para(Inteiro: i; i < este.tamanho(); i++)
		{
			este.valor(i).destruir();
		}
	}
	
	conectar(Objeto: camada)
	{
		para(Inteiro: i; i < este.tamanho(); i++)
		{
			para(Inteiro: j; j < camada.tamanho(); j++)
			{
				este.valor(i).conectar(camada.valor(j), Numero.aleatorio(-0.5, 0.5, 3));
			}
		}
	}
	
	processar()
	{
		para(Inteiro: i; i < este.tamanho(); i++)
		{
			este.valor(i).processar();
		}
	}
	
	persistir(Arquivo: arquivo)
	{
		arquivo.escreverLinha("\tCamada");
		
		para(Inteiro: i; i < este.tamanho(); i++)
		{
			este.valor(i).persistir(arquivo);
		}
		
		arquivo.escreverLinha("\t/Camada");
	}
	
	recuperar(Arquivo: arquivo)
	{
		Inteiro: i;
		Texto: linha;
		
		enquanto((linha = arquivo.linha()) == "Neurônio")
		{
			este.valor(i).recuperar(arquivo);
			i++;
		}
		
		se(linha != "/Camada")
		{
			disparar: novo ErroRede("Espera-se \"/Neurônio\" no lugar de \"" << linha << "\"");
		}
	}
}

Classe: Rede
{
	Herdar: Lista;
	
	Privado:
		
		erroUnicaCamada(Real[]: esperado)
		{
			Objeto: saida = este.valor(1);
			
			para(Inteiro: i; i < saida.tamanho(); i++)
			{
				saida.valor(i).exemploUnicaCamada(esperado[i]);
			}
		}
		
		erroMultiplasCamadas(Real[]: esperado)
		{
			Objeto: saida = este.valor(este.tamanho() - 1);
			
			para(Inteiro: i; i < saida.tamanho(); i++)
			{
				saida.valor(i).exemploMultiplasCamadas(esperado[i]);
			}
			
			para(Inteiro: c = este.tamanho() - 2; c >= 1; c--)
			{
				para(Inteiro: i; i < este.valor(c).tamanho(); i++)
				{
					Objeto: neuronio = este.valor(c).valor(i);
					Real: soma_erro;
					
					para(Inteiro: j; j < este.valor(c + 1).tamanho(); j++)
					{
						Objeto: neuronio = este.valor(c + 1).valor(j);
						soma_erro += neuronio.sinapse(i).peso() * neuronio.erro();
					}
					
					neuronio.erro(neuronio.interface().derivada(neuronio.entrada()) * soma_erro);
				}
			}
		}
		
	Publico:
		
		processar()
		{
			para(Inteiro: i = 1; i < este.tamanho(); i++)
			{
				este.valor(i).processar();
			}
		}
		
		aprenderExemplo(Real[]: entrada, Real[]: saida, Real: aprendizagem)
		{
			Objeto: camadaEntrada = este.valor(0);
			Objeto: camadaSaida = este.valor(este.tamanho() - 1);
			
			se(entrada.tamanho != camadaEntrada.tamanho())
			{
				disparar: novo ErroRede("Vetor incompatível com a entrada da rede");
			}
			
			se(saida.tamanho != camadaSaida.tamanho())
			{
				disparar: novo ErroRede("Vetor incompatível com a saída da rede");
			}
			
			para(Inteiro: i; i < camadaEntrada.tamanho(); i++)
			{
				camadaEntrada.valor(i).definir(entrada[i]);
			}
			
			este.processar();
			
			se(este.tamanho() == 2)
			{
				este.erroUnicaCamada(saida);
				
				para(Inteiro: i; i < camadaSaida.tamanho(); i++)
				{
					Objeto: neuronio = camadaSaida.valor(i);
					
					para(Inteiro: j; j < neuronio.quantidade_sinapses(); j++)
					{
						Objeto: sinapse = neuronio.sinapse(j);
						sinapse.aprender(
							neuronio.interface().derivada(neuronio.entrada()) *
							neuronio.erro() *
							sinapse.neuronio().saida() *
							aprendizagem
						);
					}
				}
			}
			senao
			{
				este.erroMultiplasCamadas(saida);
				
				para(Inteiro: c = 1; c < este.tamanho(); c++)
				{
					para(Inteiro: j; j < este.valor(c).tamanho(); j++)
					{
						Objeto: neuronio = este.valor(c).valor(j);
						
						para(Inteiro: i; i < neuronio.quantidade_sinapses(); i++)
						{
							Objeto: sinapse = neuronio.sinapse(i);
							sinapse.aprender(
								neuronio.erro() *
								sinapse.neuronio().saida() *
								aprendizagem
							);
						}
					}
				}
			}
		}
		
		conectarCamadas()
		{
			para(Inteiro: i = 1; i < este.tamanho(); i++)
			{
				este.valor(i).conectar(este.valor(i - 1));
			}
		}
		
		persistir(Texto: nome_arquivo)
		{
			Arquivo: arquivo = Abrir(nome_arquivo, "e");
			
			arquivo.escreverLinha("Rede");
			
			para(Inteiro: i = 1; i < este.tamanho(); i++)
			{
				este.valor(i).persistir(arquivo);
			}
			
			arquivo.escreverLinha("/Rede");
			arquivo.fechar();
		}
		
		recuperar(Texto: nome_arquivo)
		{
			Arquivo: arquivo = Abrir(nome_arquivo, "l");
			Inteiro: i;
			
			Texto: linha = arquivo.linha();
			
			se(linha != "Rede")
			{
				disparar: novo ErroRede("O arquivo não contém uma rede neural");
			}
			
			enquanto((linha = arquivo.linha()) == "Camada")
			{
				i++;
				este.valor(i).recuperar(arquivo);
			}
			
			se(linha != "/Rede")
			{
				disparar: novo ErroRede("Espera-se \"/Rede\" ao fim do arquivo");
			}
			
			arquivo.fechar();
		}
}
